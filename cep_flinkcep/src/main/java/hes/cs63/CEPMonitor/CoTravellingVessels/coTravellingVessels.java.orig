package hes.cs63.CEPMonitor.CoTravellingVessels;


import hes.cs63.CEPMonitor.receivedClasses.CoTravelInfo;
import hes.cs63.CEPMonitor.receivedClasses.GapMessage;
import org.apache.flink.cep.PatternSelectFunction;
import org.apache.flink.cep.PatternStream;
<<<<<<< HEAD
=======
import org.apache.flink.cep.nfa.aftermatch.AfterMatchSkipStrategy;
>>>>>>> 6e3cb0cf7a370bd8dd2a80b8e163cc613c2d3378
import org.apache.flink.cep.pattern.Pattern;
import org.apache.flink.cep.pattern.conditions.IterativeCondition;
import org.apache.flink.cep.pattern.conditions.SimpleCondition;
import org.apache.flink.shaded.guava18.com.google.common.collect.Lists;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.windowing.time.Time;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;




public class coTravellingVessels {
<<<<<<< HEAD
    public static Pattern<CoTravelInfo, ?> patternSuspiciousCoTravel(){
        Pattern<CoTravelInfo, ?> coTravelattern = Pattern.<CoTravelInfo>begin("msg_1")
                .subtype(CoTravelInfo.class)
                .where(new IterativeCondition<CoTravelInfo>() {
                    @Override
                    public boolean filter(CoTravelInfo event, Context<CoTravelInfo> ctx) throws Exception {
                        int base=event.getTimestamp();
                        int currTime=event.getTimestamp();
                        List<CoTravelInfo> l=Lists.newArrayList(ctx.getEventsForPattern("msg_1"));
                        LinkedList<String> s=new LinkedList<String>();
                        for (CoTravelInfo ev : Lists.reverse(l)) {
                            System.out.println("ALEKARAS112="+event.getMmsi_1()+"-"+ev.getMmsi_2()+"-"+ev.getTimestamp()+"-(base event)"+base+"-(previterationEvenTime)"+currTime);
                            System.out.println("LENGTH IS1 ="+l.size());
                            //allagi seiras,prota na mpei to mmsi check

                            if(Math.abs(currTime-ev.getTimestamp())<30
                                    && event.getMmsi_2()==ev.getMmsi_2()){
                                if((base-ev.getTimestamp())>60){
                                    String f="";
                                    f=f+ev.getTimestamp();
                                    for (String m:s){
                                        f=f+"-"+m;
                                    }

                                    System.out.println("ACCEPTED MALAKA="+f);
                                    System.out.println("ALEKARAS123="+event.getMmsi_1()+"-"+ev.getMmsi_2());
                                    return true;
                                }
                                else{
                                    //System.out.println("ELSE INNER");
                                    s.add(Float.toString(ev.getTimestamp()));
                                    currTime=ev.getTimestamp();
                                }
                            }
                            else{
                                //isos prepei na vgei giati tha akirwnei an vrw ena akiro id endiamesa
                                //System.out.println("ELSE OUTER");
                                return false;
                            }
                        }
                        return false;
                    }})
                .within(Time.seconds(10));
=======
    static int coTravelTime=30;
    static int coTravellingTotalTime=300;
    public static Pattern<CoTravelInfo, ?> patternSuspiciousCoTravel(){
        Pattern<CoTravelInfo, ?> coTravelattern = Pattern.<CoTravelInfo>begin("msg_1",AfterMatchSkipStrategy.skipPastLastEvent())
                .subtype(CoTravelInfo.class)
                .oneOrMore()
                .followedBy("msg_2")
                .where(new IterativeCondition<CoTravelInfo>() {
                    @Override
                    public boolean filter(CoTravelInfo event, Context<CoTravelInfo> ctx) throws Exception{
                            int base = event.getTimestamp();
                            int currTime = event.getTimestamp();
                            List<CoTravelInfo> l = Lists.newArrayList(ctx.getEventsForPattern("msg_1"));
                            for (CoTravelInfo ev : Lists.reverse(l)) {
                                if ((currTime - ev.getTimestamp()) < coTravelTime) {
                                    if (event.getMmsi_2() == ev.getMmsi_2()) {
                                        if ((base - ev.getTimestamp()) > coTravellingTotalTime) {
                                            return true;
                                        } else {
                                            currTime = ev.getTimestamp();
                                        }
                                    }
                                } else {
                                    return false;
                                }
                            }
                            return false;
                    }})
                .within(Time.seconds(3600));
>>>>>>> 6e3cb0cf7a370bd8dd2a80b8e163cc613c2d3378
        return coTravelattern;
    }

    public static DataStream<SuspiciousCoTravellingVessels> coTravellingDatastream(PatternStream<CoTravelInfo> patternStream){
        DataStream<SuspiciousCoTravellingVessels>  rendezvouz = patternStream.select(new PatternSelectFunction<CoTravelInfo, SuspiciousCoTravellingVessels>() {
            @Override
            public SuspiciousCoTravellingVessels select(Map<String,List<CoTravelInfo>> pattern) throws Exception {
<<<<<<< HEAD
                //SuspiciousCoTravellingVessels vessel_1 = (SuspiciousCoTravellingVessels) pattern.get("Vessel_1").get(0);
                CoTravelInfo msg = (CoTravelInfo) pattern.get("msg_2").get(0);
                System.out.println("RETURNING="+msg.getMmsi_1()+"\\"+msg.getMmsi_2()+"\\"+msg.getLon1()+"\\"+msg.getTimestamp());
                return new SuspiciousCoTravellingVessels(msg.getMmsi_1(),msg.getMmsi_2(),msg.getLon1(),msg.getLat1(),msg.getLon2(),msg.getLon2(),msg.getTimestamp());
=======
                CoTravelInfo msg = (CoTravelInfo) pattern.get("msg_2").get(0);
                SuspiciousCoTravellingVessels coTravel=new SuspiciousCoTravellingVessels(msg.getMmsi_1(),msg.getMmsi_2(),msg.getLon1(),msg.getLat1(),msg.getLon2(),msg.getLon2(),msg.getTimestamp());

                for(int i=0;i<pattern.get("msg_1").size();i++){
                    CoTravelInfo in_msg=pattern.get("msg_1").get(i);
                    coTravel.getMsgs().add(new SuspiciousCoTravellingVessels(in_msg.getMmsi_1(),in_msg.getMmsi_2(),in_msg.getLon1(),in_msg.getLat1(),in_msg.getLon2(),in_msg.getLon2(),in_msg.getTimestamp()));
                }
                return coTravel;
>>>>>>> 6e3cb0cf7a370bd8dd2a80b8e163cc613c2d3378
            }
        });

        return rendezvouz;
    }
}
